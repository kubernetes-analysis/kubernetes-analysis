// Code generated by counterfeiter. DO NOT EDIT.
package pluginfakes

import (
	"sync"

	"github.com/kubernetes-analysis/kubernetes-analysis/pkg/plugin"
	"k8s.io/test-infra/prow/github"
)

type FakeClient struct {
	AddLabelStub        func(int, string) error
	addLabelMutex       sync.RWMutex
	addLabelArgsForCall []struct {
		arg1 int
		arg2 string
	}
	addLabelReturns struct {
		result1 error
	}
	addLabelReturnsOnCall map[int]struct {
		result1 error
	}
	BotUserStub        func() (*github.User, error)
	botUserMutex       sync.RWMutex
	botUserArgsForCall []struct {
	}
	botUserReturns struct {
		result1 *github.User
		result2 error
	}
	botUserReturnsOnCall map[int]struct {
		result1 *github.User
		result2 error
	}
	CreateCommentStub        func(int, string) error
	createCommentMutex       sync.RWMutex
	createCommentArgsForCall []struct {
		arg1 int
		arg2 string
	}
	createCommentReturns struct {
		result1 error
	}
	createCommentReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteCommentStub        func(int) error
	deleteCommentMutex       sync.RWMutex
	deleteCommentArgsForCall []struct {
		arg1 int
	}
	deleteCommentReturns struct {
		result1 error
	}
	deleteCommentReturnsOnCall map[int]struct {
		result1 error
	}
	EditCommentStub        func(int, string) error
	editCommentMutex       sync.RWMutex
	editCommentArgsForCall []struct {
		arg1 int
		arg2 string
	}
	editCommentReturns struct {
		result1 error
	}
	editCommentReturnsOnCall map[int]struct {
		result1 error
	}
	GetIssueLabelsStub        func(int) ([]github.Label, error)
	getIssueLabelsMutex       sync.RWMutex
	getIssueLabelsArgsForCall []struct {
		arg1 int
	}
	getIssueLabelsReturns struct {
		result1 []github.Label
		result2 error
	}
	getIssueLabelsReturnsOnCall map[int]struct {
		result1 []github.Label
		result2 error
	}
	ListIssueCommentsStub        func(int) ([]github.IssueComment, error)
	listIssueCommentsMutex       sync.RWMutex
	listIssueCommentsArgsForCall []struct {
		arg1 int
	}
	listIssueCommentsReturns struct {
		result1 []github.IssueComment
		result2 error
	}
	listIssueCommentsReturnsOnCall map[int]struct {
		result1 []github.IssueComment
		result2 error
	}
	RemoveLabelStub        func(int, string) error
	removeLabelMutex       sync.RWMutex
	removeLabelArgsForCall []struct {
		arg1 int
		arg2 string
	}
	removeLabelReturns struct {
		result1 error
	}
	removeLabelReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) AddLabel(arg1 int, arg2 string) error {
	fake.addLabelMutex.Lock()
	ret, specificReturn := fake.addLabelReturnsOnCall[len(fake.addLabelArgsForCall)]
	fake.addLabelArgsForCall = append(fake.addLabelArgsForCall, struct {
		arg1 int
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("AddLabel", []interface{}{arg1, arg2})
	fake.addLabelMutex.Unlock()
	if fake.AddLabelStub != nil {
		return fake.AddLabelStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.addLabelReturns
	return fakeReturns.result1
}

func (fake *FakeClient) AddLabelCallCount() int {
	fake.addLabelMutex.RLock()
	defer fake.addLabelMutex.RUnlock()
	return len(fake.addLabelArgsForCall)
}

func (fake *FakeClient) AddLabelCalls(stub func(int, string) error) {
	fake.addLabelMutex.Lock()
	defer fake.addLabelMutex.Unlock()
	fake.AddLabelStub = stub
}

func (fake *FakeClient) AddLabelArgsForCall(i int) (int, string) {
	fake.addLabelMutex.RLock()
	defer fake.addLabelMutex.RUnlock()
	argsForCall := fake.addLabelArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) AddLabelReturns(result1 error) {
	fake.addLabelMutex.Lock()
	defer fake.addLabelMutex.Unlock()
	fake.AddLabelStub = nil
	fake.addLabelReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) AddLabelReturnsOnCall(i int, result1 error) {
	fake.addLabelMutex.Lock()
	defer fake.addLabelMutex.Unlock()
	fake.AddLabelStub = nil
	if fake.addLabelReturnsOnCall == nil {
		fake.addLabelReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addLabelReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) BotUser() (*github.User, error) {
	fake.botUserMutex.Lock()
	ret, specificReturn := fake.botUserReturnsOnCall[len(fake.botUserArgsForCall)]
	fake.botUserArgsForCall = append(fake.botUserArgsForCall, struct {
	}{})
	fake.recordInvocation("BotUser", []interface{}{})
	fake.botUserMutex.Unlock()
	if fake.BotUserStub != nil {
		return fake.BotUserStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.botUserReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) BotUserCallCount() int {
	fake.botUserMutex.RLock()
	defer fake.botUserMutex.RUnlock()
	return len(fake.botUserArgsForCall)
}

func (fake *FakeClient) BotUserCalls(stub func() (*github.User, error)) {
	fake.botUserMutex.Lock()
	defer fake.botUserMutex.Unlock()
	fake.BotUserStub = stub
}

func (fake *FakeClient) BotUserReturns(result1 *github.User, result2 error) {
	fake.botUserMutex.Lock()
	defer fake.botUserMutex.Unlock()
	fake.BotUserStub = nil
	fake.botUserReturns = struct {
		result1 *github.User
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) BotUserReturnsOnCall(i int, result1 *github.User, result2 error) {
	fake.botUserMutex.Lock()
	defer fake.botUserMutex.Unlock()
	fake.BotUserStub = nil
	if fake.botUserReturnsOnCall == nil {
		fake.botUserReturnsOnCall = make(map[int]struct {
			result1 *github.User
			result2 error
		})
	}
	fake.botUserReturnsOnCall[i] = struct {
		result1 *github.User
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) CreateComment(arg1 int, arg2 string) error {
	fake.createCommentMutex.Lock()
	ret, specificReturn := fake.createCommentReturnsOnCall[len(fake.createCommentArgsForCall)]
	fake.createCommentArgsForCall = append(fake.createCommentArgsForCall, struct {
		arg1 int
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("CreateComment", []interface{}{arg1, arg2})
	fake.createCommentMutex.Unlock()
	if fake.CreateCommentStub != nil {
		return fake.CreateCommentStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.createCommentReturns
	return fakeReturns.result1
}

func (fake *FakeClient) CreateCommentCallCount() int {
	fake.createCommentMutex.RLock()
	defer fake.createCommentMutex.RUnlock()
	return len(fake.createCommentArgsForCall)
}

func (fake *FakeClient) CreateCommentCalls(stub func(int, string) error) {
	fake.createCommentMutex.Lock()
	defer fake.createCommentMutex.Unlock()
	fake.CreateCommentStub = stub
}

func (fake *FakeClient) CreateCommentArgsForCall(i int) (int, string) {
	fake.createCommentMutex.RLock()
	defer fake.createCommentMutex.RUnlock()
	argsForCall := fake.createCommentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) CreateCommentReturns(result1 error) {
	fake.createCommentMutex.Lock()
	defer fake.createCommentMutex.Unlock()
	fake.CreateCommentStub = nil
	fake.createCommentReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) CreateCommentReturnsOnCall(i int, result1 error) {
	fake.createCommentMutex.Lock()
	defer fake.createCommentMutex.Unlock()
	fake.CreateCommentStub = nil
	if fake.createCommentReturnsOnCall == nil {
		fake.createCommentReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createCommentReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) DeleteComment(arg1 int) error {
	fake.deleteCommentMutex.Lock()
	ret, specificReturn := fake.deleteCommentReturnsOnCall[len(fake.deleteCommentArgsForCall)]
	fake.deleteCommentArgsForCall = append(fake.deleteCommentArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("DeleteComment", []interface{}{arg1})
	fake.deleteCommentMutex.Unlock()
	if fake.DeleteCommentStub != nil {
		return fake.DeleteCommentStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteCommentReturns
	return fakeReturns.result1
}

func (fake *FakeClient) DeleteCommentCallCount() int {
	fake.deleteCommentMutex.RLock()
	defer fake.deleteCommentMutex.RUnlock()
	return len(fake.deleteCommentArgsForCall)
}

func (fake *FakeClient) DeleteCommentCalls(stub func(int) error) {
	fake.deleteCommentMutex.Lock()
	defer fake.deleteCommentMutex.Unlock()
	fake.DeleteCommentStub = stub
}

func (fake *FakeClient) DeleteCommentArgsForCall(i int) int {
	fake.deleteCommentMutex.RLock()
	defer fake.deleteCommentMutex.RUnlock()
	argsForCall := fake.deleteCommentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) DeleteCommentReturns(result1 error) {
	fake.deleteCommentMutex.Lock()
	defer fake.deleteCommentMutex.Unlock()
	fake.DeleteCommentStub = nil
	fake.deleteCommentReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) DeleteCommentReturnsOnCall(i int, result1 error) {
	fake.deleteCommentMutex.Lock()
	defer fake.deleteCommentMutex.Unlock()
	fake.DeleteCommentStub = nil
	if fake.deleteCommentReturnsOnCall == nil {
		fake.deleteCommentReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteCommentReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) EditComment(arg1 int, arg2 string) error {
	fake.editCommentMutex.Lock()
	ret, specificReturn := fake.editCommentReturnsOnCall[len(fake.editCommentArgsForCall)]
	fake.editCommentArgsForCall = append(fake.editCommentArgsForCall, struct {
		arg1 int
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("EditComment", []interface{}{arg1, arg2})
	fake.editCommentMutex.Unlock()
	if fake.EditCommentStub != nil {
		return fake.EditCommentStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.editCommentReturns
	return fakeReturns.result1
}

func (fake *FakeClient) EditCommentCallCount() int {
	fake.editCommentMutex.RLock()
	defer fake.editCommentMutex.RUnlock()
	return len(fake.editCommentArgsForCall)
}

func (fake *FakeClient) EditCommentCalls(stub func(int, string) error) {
	fake.editCommentMutex.Lock()
	defer fake.editCommentMutex.Unlock()
	fake.EditCommentStub = stub
}

func (fake *FakeClient) EditCommentArgsForCall(i int) (int, string) {
	fake.editCommentMutex.RLock()
	defer fake.editCommentMutex.RUnlock()
	argsForCall := fake.editCommentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) EditCommentReturns(result1 error) {
	fake.editCommentMutex.Lock()
	defer fake.editCommentMutex.Unlock()
	fake.EditCommentStub = nil
	fake.editCommentReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) EditCommentReturnsOnCall(i int, result1 error) {
	fake.editCommentMutex.Lock()
	defer fake.editCommentMutex.Unlock()
	fake.EditCommentStub = nil
	if fake.editCommentReturnsOnCall == nil {
		fake.editCommentReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.editCommentReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) GetIssueLabels(arg1 int) ([]github.Label, error) {
	fake.getIssueLabelsMutex.Lock()
	ret, specificReturn := fake.getIssueLabelsReturnsOnCall[len(fake.getIssueLabelsArgsForCall)]
	fake.getIssueLabelsArgsForCall = append(fake.getIssueLabelsArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("GetIssueLabels", []interface{}{arg1})
	fake.getIssueLabelsMutex.Unlock()
	if fake.GetIssueLabelsStub != nil {
		return fake.GetIssueLabelsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getIssueLabelsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetIssueLabelsCallCount() int {
	fake.getIssueLabelsMutex.RLock()
	defer fake.getIssueLabelsMutex.RUnlock()
	return len(fake.getIssueLabelsArgsForCall)
}

func (fake *FakeClient) GetIssueLabelsCalls(stub func(int) ([]github.Label, error)) {
	fake.getIssueLabelsMutex.Lock()
	defer fake.getIssueLabelsMutex.Unlock()
	fake.GetIssueLabelsStub = stub
}

func (fake *FakeClient) GetIssueLabelsArgsForCall(i int) int {
	fake.getIssueLabelsMutex.RLock()
	defer fake.getIssueLabelsMutex.RUnlock()
	argsForCall := fake.getIssueLabelsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) GetIssueLabelsReturns(result1 []github.Label, result2 error) {
	fake.getIssueLabelsMutex.Lock()
	defer fake.getIssueLabelsMutex.Unlock()
	fake.GetIssueLabelsStub = nil
	fake.getIssueLabelsReturns = struct {
		result1 []github.Label
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetIssueLabelsReturnsOnCall(i int, result1 []github.Label, result2 error) {
	fake.getIssueLabelsMutex.Lock()
	defer fake.getIssueLabelsMutex.Unlock()
	fake.GetIssueLabelsStub = nil
	if fake.getIssueLabelsReturnsOnCall == nil {
		fake.getIssueLabelsReturnsOnCall = make(map[int]struct {
			result1 []github.Label
			result2 error
		})
	}
	fake.getIssueLabelsReturnsOnCall[i] = struct {
		result1 []github.Label
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListIssueComments(arg1 int) ([]github.IssueComment, error) {
	fake.listIssueCommentsMutex.Lock()
	ret, specificReturn := fake.listIssueCommentsReturnsOnCall[len(fake.listIssueCommentsArgsForCall)]
	fake.listIssueCommentsArgsForCall = append(fake.listIssueCommentsArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("ListIssueComments", []interface{}{arg1})
	fake.listIssueCommentsMutex.Unlock()
	if fake.ListIssueCommentsStub != nil {
		return fake.ListIssueCommentsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listIssueCommentsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ListIssueCommentsCallCount() int {
	fake.listIssueCommentsMutex.RLock()
	defer fake.listIssueCommentsMutex.RUnlock()
	return len(fake.listIssueCommentsArgsForCall)
}

func (fake *FakeClient) ListIssueCommentsCalls(stub func(int) ([]github.IssueComment, error)) {
	fake.listIssueCommentsMutex.Lock()
	defer fake.listIssueCommentsMutex.Unlock()
	fake.ListIssueCommentsStub = stub
}

func (fake *FakeClient) ListIssueCommentsArgsForCall(i int) int {
	fake.listIssueCommentsMutex.RLock()
	defer fake.listIssueCommentsMutex.RUnlock()
	argsForCall := fake.listIssueCommentsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) ListIssueCommentsReturns(result1 []github.IssueComment, result2 error) {
	fake.listIssueCommentsMutex.Lock()
	defer fake.listIssueCommentsMutex.Unlock()
	fake.ListIssueCommentsStub = nil
	fake.listIssueCommentsReturns = struct {
		result1 []github.IssueComment
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListIssueCommentsReturnsOnCall(i int, result1 []github.IssueComment, result2 error) {
	fake.listIssueCommentsMutex.Lock()
	defer fake.listIssueCommentsMutex.Unlock()
	fake.ListIssueCommentsStub = nil
	if fake.listIssueCommentsReturnsOnCall == nil {
		fake.listIssueCommentsReturnsOnCall = make(map[int]struct {
			result1 []github.IssueComment
			result2 error
		})
	}
	fake.listIssueCommentsReturnsOnCall[i] = struct {
		result1 []github.IssueComment
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) RemoveLabel(arg1 int, arg2 string) error {
	fake.removeLabelMutex.Lock()
	ret, specificReturn := fake.removeLabelReturnsOnCall[len(fake.removeLabelArgsForCall)]
	fake.removeLabelArgsForCall = append(fake.removeLabelArgsForCall, struct {
		arg1 int
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("RemoveLabel", []interface{}{arg1, arg2})
	fake.removeLabelMutex.Unlock()
	if fake.RemoveLabelStub != nil {
		return fake.RemoveLabelStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.removeLabelReturns
	return fakeReturns.result1
}

func (fake *FakeClient) RemoveLabelCallCount() int {
	fake.removeLabelMutex.RLock()
	defer fake.removeLabelMutex.RUnlock()
	return len(fake.removeLabelArgsForCall)
}

func (fake *FakeClient) RemoveLabelCalls(stub func(int, string) error) {
	fake.removeLabelMutex.Lock()
	defer fake.removeLabelMutex.Unlock()
	fake.RemoveLabelStub = stub
}

func (fake *FakeClient) RemoveLabelArgsForCall(i int) (int, string) {
	fake.removeLabelMutex.RLock()
	defer fake.removeLabelMutex.RUnlock()
	argsForCall := fake.removeLabelArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) RemoveLabelReturns(result1 error) {
	fake.removeLabelMutex.Lock()
	defer fake.removeLabelMutex.Unlock()
	fake.RemoveLabelStub = nil
	fake.removeLabelReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) RemoveLabelReturnsOnCall(i int, result1 error) {
	fake.removeLabelMutex.Lock()
	defer fake.removeLabelMutex.Unlock()
	fake.RemoveLabelStub = nil
	if fake.removeLabelReturnsOnCall == nil {
		fake.removeLabelReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeLabelReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addLabelMutex.RLock()
	defer fake.addLabelMutex.RUnlock()
	fake.botUserMutex.RLock()
	defer fake.botUserMutex.RUnlock()
	fake.createCommentMutex.RLock()
	defer fake.createCommentMutex.RUnlock()
	fake.deleteCommentMutex.RLock()
	defer fake.deleteCommentMutex.RUnlock()
	fake.editCommentMutex.RLock()
	defer fake.editCommentMutex.RUnlock()
	fake.getIssueLabelsMutex.RLock()
	defer fake.getIssueLabelsMutex.RUnlock()
	fake.listIssueCommentsMutex.RLock()
	defer fake.listIssueCommentsMutex.RUnlock()
	fake.removeLabelMutex.RLock()
	defer fake.removeLabelMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ plugin.Client = new(FakeClient)
